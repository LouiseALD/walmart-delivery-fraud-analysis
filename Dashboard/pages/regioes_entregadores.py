import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# Importar fun√ß√µes utilit√°rias
from utils.loaders import prepare_region_data, prepare_driver_data, detect_anomalies
from utils.graphics import create_bar_chart, create_scatter_plot, create_map
from utils.filters import create_region_filter, filter_suspicious_entries
from config.style_config import create_kpi_card, create_insight_box, create_tooltip

def get_coordinates_data():
    """
    Retorna DataFrame com coordenadas geogr√°ficas das regi√µes.
    """
    df_coords = pd.DataFrame({
        "region": [
            "Altamonte Springs",
            "Clermont", 
            "Apopka",
            "Orlando",
            "Winter Park",
            "Kissimmee",
            "Sanford"
        ],
        "latitude": [
            28.6611,
            28.5494,
            28.6934,
            28.5383,
            28.5994,
            28.2919,
            28.8005
        ],
        "longitude": [
            -81.3656,
            -81.7729,
            -81.5322,
            -81.3792,
            -81.3392,
            -81.4079,
            -81.2731
        ]
    })
    return df_coords

def show(data):
    """
    Exibe an√°lise de regi√µes e entregadores com maior incid√™ncia de fraudes.
    
    Args:
        data: Dicion√°rio com DataFrames para an√°lise
    """
    st.markdown("<h2 style='text-align: center;'>Regi√µes & Entregadores</h2>", unsafe_allow_html=True)
    
    # Verificar se os dados foram carregados
    if not data:
        st.error("N√£o foi poss√≠vel carregar os dados para an√°lise de regi√µes e entregadores.")
        return

    # Preparar dados
    df_region = prepare_region_data(data.get('fraud_region')) if 'fraud_region' in data else None
    df_drivers = prepare_driver_data(
        data.get('drivers'),
        data.get('suspicious_drivers')
    ) if 'drivers' in data or 'suspicious_drivers' in data else None
    
    # Verificar se temos pelo menos um conjunto de dados
    if (df_region is None or df_region.empty) and (df_drivers is None or df_drivers.empty):
        st.warning("Dados insuficientes para an√°lise de regi√µes e entregadores.")
        return
    
    # Configura√ß√£o de layout
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Criar abas para separar as an√°lises
    tab1, tab2 = st.tabs([" An√°lise Regional", " Perfil de Entregadores"])
    
    # Aba 1: An√°lise Regional
    with tab1:
        if df_region is not None and not df_region.empty:
            # T√≠tulo da se√ß√£o
            st.markdown("<h3>An√°lise por Regi√£o</h3>", unsafe_allow_html=True)
            
            # Filtro de regi√£o
            selected_region = create_region_filter(df_region, 'region', 'region_tab')
            
            # Aplicar filtro de regi√£o
            if selected_region != "Todas":
                df_region_filtered = df_region[df_region['region'] == selected_region]
            else:
                df_region_filtered = df_region
            
            # Integrar coordenadas geogr√°ficas
            df_coords = get_coordinates_data()
            df_region_filtered = df_region_filtered.merge(df_coords, on="region", how="left")
            
            # Se√ß√£o 1: KPIs de regi√£o
            st.markdown("<h4> Indicadores Regionais</h4>", unsafe_allow_html=True)
            
            col1, col2, col3, col4 = st.columns(4)
            
            # Total de regi√µes
            with col1:
                total_regions = len(df_region_filtered)
                st.markdown(
                    create_kpi_card(
                        "Total de Regi√µes", 
                        f"{total_regions}", 
                        "Regi√µes analisadas"
                    ), 
                    unsafe_allow_html=True
                )
            
            # Total de pedidos
            with col2:
                if 'total_pedidos' in df_region_filtered.columns:
                    total_orders = df_region_filtered['total_pedidos'].sum()
                    st.markdown(
                        create_kpi_card(
                            "Total de Pedidos", 
                            f"{total_orders:,}".replace(',', '.'), 
                            "Pedidos nas regi√µes"
                        ), 
                        unsafe_allow_html=True
                    )
            
            # Total de itens faltantes
            with col3:
                if 'total_itens_faltantes' in df_region_filtered.columns:
                    total_missing = df_region_filtered['total_itens_faltantes'].sum()
                    st.markdown(
                        create_kpi_card(
                            "Itens Faltantes", 
                            f"{total_missing:,}".replace(',', '.'), 
                            "Itens n√£o entregues",
                            color="danger"
                        ), 
                        unsafe_allow_html=True
                    )
            
            # Taxa m√©dia de fraude
            with col4:
                if 'percentual_fraude' in df_region_filtered.columns:
                    avg_fraud = df_region_filtered['percentual_fraude'].mean()
                    st.markdown(
                        create_kpi_card(
                            "Taxa M√©dia de Fraude", 
                            f"{avg_fraud:.2f}%", 
                            "M√©dia entre regi√µes",
                            color="warning" if avg_fraud > 5 else "success"
                        ), 
                        unsafe_allow_html=True
                    )
            
            st.markdown("<hr>", unsafe_allow_html=True)
            
            # Se√ß√£o 2: Visualiza√ß√£o de regi√µes com mapa integrado
            st.markdown("<h4> Distribui√ß√£o Geogr√°fica de Fraudes</h4>", unsafe_allow_html=True)
            
            # Verificar se temos dados de coordenadas ap√≥s o merge
            has_coords = all(col in df_region_filtered.columns for col in ['latitude', 'longitude'])
            coords_available = df_region_filtered[['latitude', 'longitude']].notna().all(axis=1).any()
            
            if has_coords and coords_available:
                # Criar mapa interativo
                try:
                    # Remover linhas sem coordenadas para o mapa
                    df_map = df_region_filtered.dropna(subset=['latitude', 'longitude'])
                    
                    if not df_map.empty:
                        fig = create_map(
                            df_map,
                            'latitude',
                            'longitude',
                            color_col='percentual_fraude',
                            size_col='total_pedidos',
                            hover_name='region',
                            hover_data=['total_itens_faltantes', 'media_itens_faltantes'],
                            title="Mapa Interativo de Fraudes por Regi√£o"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Informa√ß√µes sobre o mapa
                        st.markdown(
                            create_insight_box(
                                " **Como interpretar o mapa:** "
                                "‚Ä¢ Cores mais intensas = maior taxa de fraude "
                                "‚Ä¢ Tamanho dos pontos = volume de pedidos "
                                "‚Ä¢ Passe o mouse sobre os pontos para mais detalhes",
                                icon_type="info"
                            ),
                            unsafe_allow_html=True
                        )
                    else:
                        st.warning("Nenhuma regi√£o com coordenadas v√°lidas encontrada.")
                        
                except Exception as e:
                    st.error(f"Erro ao criar mapa: {e}")
                    has_coords = False  # Fallback para gr√°fico de barras
            
            if not has_coords or not coords_available:
                # Fallback: Se n√£o temos coordenadas, mostrar gr√°fico de barras
                st.warning("Dados de geolocaliza√ß√£o n√£o dispon√≠veis para todas as regi√µes. Mostrando distribui√ß√£o por regi√£o.")
                
                # Ordenar regi√µes por percentual de fraude
                region_sorted = df_region_filtered.sort_values('percentual_fraude', ascending=False)
                
                # Criar gr√°fico de barras
                fig = create_bar_chart(
                    region_sorted,
                    'region',
                    'percentual_fraude',
                    'Taxa de Fraude por Regi√£o (%)',
                    orientation='h',
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            # Identificar regi√£o mais problem√°tica
            if not df_region_filtered.empty:
                top_region = df_region_filtered.sort_values('percentual_fraude', ascending=False).iloc[0]
                
                st.markdown(
                    create_insight_box(
                        f"üö® **Regi√£o Cr√≠tica:** '{top_region['region']}' apresenta a maior taxa de fraude ({top_region['percentual_fraude']:.2f}%). "
                        f"Foram registrados {top_region['total_itens_faltantes']:,} itens faltantes em {top_region['total_pedidos']:,} pedidos. ".replace(',', '.') +
                        "Recomenda-se uma investiga√ß√£o aprofundada desta regi√£o.",
                        icon_type="warning"
                    ),
                    unsafe_allow_html=True
                )
            
            st.markdown("<hr>", unsafe_allow_html=True)
            
            # Se√ß√£o 3: An√°lise detalhada das regi√µes
            st.markdown("<h4> An√°lise Detalhada por Regi√£o</h4>", unsafe_allow_html=True)
            
            # Tabela de regi√µes com coordenadas
            if has_coords:
                st.markdown("##### Regi√µes com Localiza√ß√£o Geogr√°fica")
                
                # Preparar dados para exibi√ß√£o
                display_df = df_region_filtered.copy()
                
                # Selecionar colunas relevantes
                display_columns = ['region', 'percentual_fraude', 'total_pedidos', 'total_itens_faltantes']
                if 'latitude' in display_df.columns and 'longitude' in display_df.columns:
                    display_columns.extend(['latitude', 'longitude'])
                
                # Filtrar colunas existentes
                display_columns = [col for col in display_columns if col in display_df.columns]
                
                # Renomear para melhor apresenta√ß√£o
                rename_map = {
                    'region': 'Regi√£o',
                    'percentual_fraude': 'Taxa de Fraude (%)',
                    'total_pedidos': 'Total de Pedidos', 
                    'total_itens_faltantes': 'Itens Faltantes',
                    'latitude': 'Latitude',
                    'longitude': 'Longitude'
                }
                
                display_df_renamed = display_df[display_columns].rename(columns=rename_map)
                
                # Formatear n√∫meros
                if 'Taxa de Fraude (%)' in display_df_renamed.columns:
                    display_df_renamed['Taxa de Fraude (%)'] = display_df_renamed['Taxa de Fraude (%)'].round(2)
                
                # Destacar regi√£o cr√≠tica
                st.dataframe(
                    display_df_renamed.sort_values('Taxa de Fraude (%)', ascending=False),
                    use_container_width=True,
                    height=300
                )
            
            # Se√ß√£o 4: Compara√ß√£o entre regi√µes
            st.markdown("<h4>Compara√ß√£o Entre Regi√µes</h4>", unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            # Gr√°fico de barras com taxa de fraude por regi√£o
            with col1:
                region_sorted = df_region_filtered.sort_values('percentual_fraude', ascending=False)
                
                fig = create_bar_chart(
                    region_sorted,
                    'region',
                    'percentual_fraude',
                    'Taxa de Fraude por Regi√£o (%)',
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            # Gr√°fico de barras com m√©dia de itens faltantes por regi√£o
            with col2:
                if 'media_itens_faltantes' in df_region_filtered.columns:
                    region_sorted_by_avg = df_region_filtered.sort_values('media_itens_faltantes', ascending=False)
                    
                    fig = create_bar_chart(
                        region_sorted_by_avg,
                        'region',
                        'media_itens_faltantes',
                        'M√©dia de Itens Faltantes por Regi√£o',
                        height=400
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                elif 'total_itens_faltantes' in df_region_filtered.columns:
                    # Usar total se m√©dia n√£o dispon√≠vel
                    region_sorted_by_total = df_region_filtered.sort_values('total_itens_faltantes', ascending=False)
                    
                    fig = create_bar_chart(
                        region_sorted_by_total,
                        'region',
                        'total_itens_faltantes',
                        'Total de Itens Faltantes por Regi√£o',
                        height=400
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
            
            # Criar scatter plot para correla√ß√£o
            if 'total_pedidos' in df_region_filtered.columns and 'percentual_fraude' in df_region_filtered.columns:
                st.markdown("##### üîç An√°lise de Correla√ß√£o: Volume vs Taxa de Fraude")
                
                fig = create_scatter_plot(
                    df_region_filtered,
                    'total_pedidos',
                    'percentual_fraude',
                    'Rela√ß√£o entre Volume de Pedidos e Taxa de Fraude',
                    text_column='region',
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Calcular correla√ß√£o
                correlation = df_region_filtered['total_pedidos'].corr(df_region_filtered['percentual_fraude'])
                
                # Interpretar correla√ß√£o
                if abs(correlation) < 0.3:
                    corr_message = (
                        f"üìä H√° uma correla√ß√£o fraca ({correlation:.2f}) entre o volume de pedidos e a taxa de fraude. "
                        "O volume de entregas parece n√£o afetar significativamente a ocorr√™ncia de fraudes."
                    )
                    corr_icon = "info"
                elif correlation >= 0.3:
                    corr_message = (
                        f"üìà H√° uma correla√ß√£o positiva significativa ({correlation:.2f}) entre o volume de pedidos e a taxa de fraude. "
                        "Regi√µes com mais entregas tendem a ter maiores taxas de fraude, possivelmente devido √† press√£o operacional."
                    )
                    corr_icon = "warning"
                else:
                    corr_message = (
                        f"üìâ H√° uma correla√ß√£o negativa significativa ({correlation:.2f}) entre o volume de pedidos e a taxa de fraude. "
                        "Regi√µes com menos entregas tendem a ter maiores taxas de fraude, sugerindo poss√≠veis problemas operacionais nestas √°reas."
                    )
                    corr_icon = "warning"
                
                st.markdown(
                    create_insight_box(corr_message, icon_type=corr_icon),
                    unsafe_allow_html=True
                )
        else:
            st.warning("Dados de regi√£o n√£o dispon√≠veis.")
    
    # Aba 2: Perfil de Entregadores (mant√©m o c√≥digo original)
    with tab2:
        if df_drivers is not None and not df_drivers.empty:
            # T√≠tulo da se√ß√£o
            st.markdown("<h3>An√°lise de Entregadores</h3>", unsafe_allow_html=True)
            
            # Controles de filtro
            col1, col2 = st.columns(2)
            
            with col1:
                # Filtro de idade
                if 'age' in df_drivers.columns:
                    min_age = int(df_drivers['age'].min())
                    max_age = int(df_drivers['age'].max())
                    
                    age_range = st.slider(
                        "Faixa Et√°ria",
                        min_value=min_age,
                        max_value=max_age,
                        value=(min_age, max_age),
                        step=1
                    )
                    
                    # Aplicar filtro de idade
                    min_selected_age, max_selected_age = age_range
                    df_drivers_filtered = df_drivers[
                        (df_drivers['age'] >= min_selected_age) & 
                        (df_drivers['age'] <= max_selected_age)
                    ]
                else:
                    df_drivers_filtered = df_drivers
            
            with col2:
                # Filtro de suspeitos
                if 'suspeito' in df_drivers.columns:
                    show_suspicious_only = st.checkbox("Mostrar apenas motoristas suspeitos", value=False)
                    
                    if show_suspicious_only:
                        df_drivers_filtered = df_drivers_filtered[df_drivers_filtered['suspeito'] == True]
                
                # Filtro de n√∫mero m√≠nimo de entregas
                if 'orders_delivered' in df_drivers_filtered.columns or 'total_entregas' in df_drivers_filtered.columns:
                    col_name = 'orders_delivered' if 'orders_delivered' in df_drivers_filtered.columns else 'total_entregas'
                    
                    min_deliveries = int(df_drivers_filtered[col_name].min())
                    max_deliveries = int(df_drivers_filtered[col_name].max())
                    
                    min_deliver_threshold = st.slider(
                        "M√≠nimo de Entregas",
                        min_value=min_deliveries,
                        max_value=max_deliveries,
                        value=min_deliveries,
                        step=10
                    )
                    
                    # Aplicar filtro de entregas m√≠nimas
                    df_drivers_filtered = df_drivers_filtered[df_drivers_filtered[col_name] >= min_deliver_threshold]
            
            # Verificar se ainda temos dados ap√≥s os filtros
            if df_drivers_filtered.empty:
                st.warning("Nenhum entregador encontrado com os filtros selecionados.")
                return
            
            st.markdown("<hr>", unsafe_allow_html=True)
            
            # Se√ß√£o 1: KPIs de entregadores
            st.markdown("<h4>üìä Indicadores de Entregadores</h4>", unsafe_allow_html=True)
            
            col1, col2, col3, col4 = st.columns(4)
            
            # Total de entregadores
            with col1:
                total_drivers = len(df_drivers_filtered)
                st.markdown(
                    create_kpi_card(
                        "Total de Entregadores", 
                        f"{total_drivers}", 
                        "Entregadores analisados"
                    ), 
                    unsafe_allow_html=True
                )
            
            # Total de entregadores suspeitos
            with col2:
                if 'suspeito' in df_drivers_filtered.columns:
                    suspicious_count = df_drivers_filtered['suspeito'].sum()
                    suspicious_pct = (suspicious_count / total_drivers) * 100
                    
                    st.markdown(
                        create_kpi_card(
                            "Entregadores Suspeitos", 
                            f"{suspicious_count} ({suspicious_pct:.1f}%)", 
                            "Com alta taxa de fraude",
                            color="danger" if suspicious_count > 10 else "warning"
                        ), 
                        unsafe_allow_html=True
                    )
            
            # Taxa m√©dia de fraude
            with col3:
                if 'percentual_fraude' in df_drivers_filtered.columns:
                    avg_fraud = df_drivers_filtered['percentual_fraude'].mean()
                    
                    st.markdown(
                        create_kpi_card(
                            "Taxa M√©dia de Fraude", 
                            f"{avg_fraud:.2f}%", 
                            "Entre entregadores",
                            color="danger" if avg_fraud > 10 else "warning"
                        ), 
                        unsafe_allow_html=True
                    )
            
            # Idade m√©dia
            with col4:
                if 'age' in df_drivers_filtered.columns:
                    avg_age = df_drivers_filtered['age'].mean()
                    
                    st.markdown(
                        create_kpi_card(
                            "Idade M√©dia", 
                            f"{avg_age:.1f} anos", 
                            "Dos entregadores"
                        ), 
                        unsafe_allow_html=True
                    )
            
            st.markdown("<hr>", unsafe_allow_html=True)
            
            # Se√ß√£o 2: Top entregadores suspeitos
            st.markdown("<h4>üîç Entregadores com Maior Taxa de Fraude</h4>", unsafe_allow_html=True)
            
            # Verificar quais colunas est√£o dispon√≠veis para ranking
            rank_column = None
            if 'percentual_fraude' in df_drivers_filtered.columns:
                rank_column = 'percentual_fraude'
            elif 'missing_ratio' in df_drivers_filtered.columns:
                rank_column = 'missing_ratio'
            elif 'problem_order_ratio' in df_drivers_filtered.columns:
                rank_column = 'problem_order_ratio'
            elif 'media_itens_faltantes' in df_drivers_filtered.columns:
                rank_column = 'media_itens_faltantes'
            
            if rank_column is not None:
                # Ordenar por coluna de ranking
                top_drivers = df_drivers_filtered.sort_values(rank_column, ascending=False).head(10)
                
                # Definir nome da coluna para display
                driver_name_col = 'driver_name' if 'driver_name' in top_drivers.columns else 'nome' if 'nome' in top_drivers.columns else None
                
                if driver_name_col:
                    # Criar gr√°fico de barras
                    fig = create_bar_chart(
                        top_drivers,
                        driver_name_col,
                        rank_column,
                        f'Top 10 Entregadores por {rank_column.replace("_", " ").title()}',
                        orientation='h',
                        height=500
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Exibir tabela com detalhes
                    st.markdown("<h4>üìã Detalhes dos Entregadores Mais Cr√≠ticos</h4>", unsafe_allow_html=True)
                    
                    # Preparar colunas para exibi√ß√£o
                    display_cols = [driver_name_col, 'age', rank_column]
                    
                    # Adicionar colunas de entregas e itens faltantes se dispon√≠veis
                    if 'orders_delivered' in top_drivers.columns:
                        display_cols.append('orders_delivered')
                    elif 'total_entregas' in top_drivers.columns:
                        display_cols.append('total_entregas')
                    
                    if 'total_missing_items' in top_drivers.columns:
                        display_cols.append('total_missing_items')
                    elif 'itens_faltantes' in top_drivers.columns:
                        display_cols.append('itens_faltantes')
                    
                    # Garantir que temos todas as colunas
                    display_cols = [col for col in display_cols if col in top_drivers.columns]
                    
                    # Renomear colunas para exibi√ß√£o
                    rename_map = {
                        driver_name_col: 'Entregador',
                        'age': 'Idade',
                        'percentual_fraude': 'Taxa de Fraude (%)',
                        'missing_ratio': 'Taxa de Itens Faltantes',
                        'problem_order_ratio': 'Taxa de Problemas',
                        'media_itens_faltantes': 'M√©dia de Itens Faltantes',
                        'orders_delivered': 'Entregas Realizadas',
                        'total_entregas': 'Entregas Realizadas',
                        'total_missing_items': 'Itens Faltantes',
                        'itens_faltantes': 'Itens Faltantes'
                    }
                    
                    display_df = top_drivers[display_cols].rename(columns={col: rename_map[col] for col in display_cols if col in rename_map})
                    
                    # Destacar os entregadores mais cr√≠ticos
                    st.dataframe(
                        display_df,
                        use_container_width=True,
                        height=350
                    )
            else:
                st.warning("Dados insuficientes para ranquear entregadores.")
            
            st.markdown("<hr>", unsafe_allow_html=True)
            
            # Se√ß√£o 3: An√°lise explorat√≥ria
            st.markdown("<h4>üî¨ An√°lise Explorat√≥ria de Entregadores</h4>", unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            # Distribui√ß√£o por idade
            with col1:
                if 'age' in df_drivers_filtered.columns:
                    # Agrupar por faixa et√°ria
                    df_drivers_filtered['faixa_etaria'] = pd.cut(
                        df_drivers_filtered['age'],
                        bins=[18, 25, 35, 45, 55, 65, 100],
                        labels=['18-25', '26-35', '36-45', '46-55', '56-65', '65+']
                    )
                    
                    age_group = df_drivers_filtered.groupby('faixa_etaria').size().reset_index(name='contagem')
                    
                    # Criar gr√°fico de barras
                    fig = create_bar_chart(
                        age_group,
                        'faixa_etaria',
                        'contagem',
                        'Distribui√ß√£o de Entregadores por Faixa Et√°ria',
                        height=400
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Verificar correla√ß√£o entre idade e fraude
                    if rank_column is not None:
                        correlation = df_drivers_filtered['age'].corr(df_drivers_filtered[rank_column])
                        
                        if abs(correlation) < 0.2:
                            age_insight = (
                                f"üìä N√£o h√° correla√ß√£o significativa ({correlation:.2f}) entre a idade do entregador e a taxa de fraude."
                            )
                        elif correlation > 0:
                            age_insight = (
                                f"üìà H√° uma correla√ß√£o positiva ({correlation:.2f}) entre a idade e a taxa de fraude. "
                                "Entregadores mais velhos tendem a apresentar mais problemas nas entregas."
                            )
                        else:
                            age_insight = (
                                f"üìâ H√° uma correla√ß√£o negativa ({correlation:.2f}) entre a idade e a taxa de fraude. "
                                "Entregadores mais jovens tendem a apresentar mais problemas nas entregas."
                            )
                        
                        st.markdown(
                            create_insight_box(age_insight, icon_type="info"),
                            unsafe_allow_html=True
                        )
            
            # Rela√ß√£o entre entregas e fraudes
            with col2:
                delivery_col = None
                if 'orders_delivered' in df_drivers_filtered.columns:
                    delivery_col = 'orders_delivered'
                elif 'total_entregas' in df_drivers_filtered.columns:
                    delivery_col = 'total_entregas'
                elif 'Trips' in df_drivers_filtered.columns:
                    delivery_col = 'Trips'
                
                if delivery_col and rank_column:
                    # Criar scatter plot
                    fig = create_scatter_plot(
                        df_drivers_filtered,
                        delivery_col,
                        rank_column,
                        f'Rela√ß√£o entre N√∫mero de Entregas e {rank_column.replace("_", " ").title()}',
                        height=400
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Calcular correla√ß√£o
                    correlation = df_drivers_filtered[delivery_col].corr(df_drivers_filtered[rank_column])
                    
                    if abs(correlation) < 0.2:
                        delivery_insight = (
                            f"üìä N√£o h√° correla√ß√£o significativa ({correlation:.2f}) entre o volume de entregas e a taxa de fraude. "
                            "Outros fatores parecem influenciar mais as ocorr√™ncias."
                        )
                    elif correlation > 0:
                        delivery_insight = (
                            f"üìà H√° uma correla√ß√£o positiva ({correlation:.2f}) entre o volume de entregas e a taxa de fraude. "
                            "Entregadores com mais entregas tendem a apresentar mais problemas, possivelmente devido √† press√£o por produtividade."
                        )
                    else:
                        delivery_insight = (
                            f"üìâ H√° uma correla√ß√£o negativa ({correlation:.2f}) entre o volume de entregas e a taxa de fraude. "
                            "Entregadores com menos entregas tendem a apresentar mais problemas, sugerindo poss√≠vel falta de experi√™ncia ou treinamento."
                        )
                    
                    st.markdown(
                        create_insight_box(delivery_insight, icon_type="info"),
                        unsafe_allow_html=True
                    )
            
            # Detec√ß√£o de anomalias
            if rank_column:
                st.markdown("<h4>üö® Detec√ß√£o de Entregadores An√¥malos</h4>", unsafe_allow_html=True)
                
                # Detectar anomalias no ranking
                df_anomalies = detect_anomalies(df_drivers_filtered, rank_column)
                
                # Contar anomalias
                anomaly_count = df_anomalies['anomalia'].sum()
                
                if anomaly_count > 0:
                    # Filtrar apenas anomalias
                    df_anomalies_only = df_anomalies[df_anomalies['anomalia']].sort_values(rank_column, ascending=False)
                    
                    # Exibir contador de anomalias
                    st.warning(f"üö® Foram detectados {anomaly_count} entregadores com comportamento an√¥malo.")
                    
                    # Exibir gr√°fico com todas as observa√ß√µes, destacando anomalias
                    driver_name_col = 'driver_name' if 'driver_name' in df_anomalies else 'nome' if 'nome' in df_anomalies else None
                    
                    if driver_name_col and delivery_col:
                        fig = px.scatter(
                            df_anomalies,
                            x=delivery_col,
                            y=rank_column,
                            color='anomalia',
                            hover_name=driver_name_col,
                            title=f'Detec√ß√£o de Anomalias: Entregadores com {rank_column.replace("_", " ").title()} At√≠pica',
                            color_discrete_map={True: 'red', False: 'blue'},
                            labels={
                                delivery_col: 'N√∫mero de Entregas',
                                rank_column: rank_column.replace("_", " ").title(),
                                'anomalia': 'Comportamento An√¥malo'
                            }
                        )
                        
                        fig.update_layout(
                            xaxis_title="N√∫mero de Entregas",
                            yaxis_title=rank_column.replace("_", " ").title(),
                            legend_title="Anomalia",
                            font=dict(family="sans serif"),
                            paper_bgcolor='rgba(0,0,0,0)',
                            plot_bgcolor='rgba(0,0,0,0)',
                            height=400
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Lista dos entregadores an√¥malos
                        st.markdown("<h5>üîç Entregadores com Comportamento An√¥malo:</h5>", unsafe_allow_html=True)
                        
                        # Preparar colunas para exibi√ß√£o
                        anomaly_cols = [driver_name_col, 'age', rank_column, delivery_col]
                        anomaly_cols = [col for col in anomaly_cols if col in df_anomalies_only.columns]
                        
                        # Renomear colunas
                        rename_map = {
                            driver_name_col: 'Entregador',
                            'age': 'Idade',
                            'percentual_fraude': 'Taxa de Fraude (%)',
                            'missing_ratio': 'Taxa de Itens Faltantes',
                            'problem_order_ratio': 'Taxa de Problemas',
                            'media_itens_faltantes': 'M√©dia de Itens Faltantes',
                            'orders_delivered': 'Entregas Realizadas',
                            'total_entregas': 'Entregas Realizadas',
                            'Trips': 'Entregas Realizadas'
                        }
                        
                        anomaly_df = df_anomalies_only[anomaly_cols].rename(columns={col: rename_map[col] for col in anomaly_cols if col in rename_map})
                        
                        st.dataframe(
                            anomaly_df,
                            use_container_width=True
                        )
                        
                        st.markdown(
                            create_insight_box(
                                "‚ö†Ô∏è Os entregadores destacados apresentam padr√µes significativamente diferentes dos demais, "
                                "com taxas de fraude estatisticamente an√¥malas. Recomenda-se uma investiga√ß√£o priorit√°ria destes casos.",
                                icon_type="warning"
                            ),
                            unsafe_allow_html=True
                        )
                else:
                    st.success("‚úÖ N√£o foram detectados entregadores com comportamento estatisticamente an√¥malo.")
        else:
            st.warning("Dados de entregadores n√£o dispon√≠veis.")
    
