import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# Importar fun√ß√µes utilit√°rias
from utils.graphics import create_bar_chart
from config.style_config import create_kpi_card, create_insight_box, create_tooltip

def show(data):
    """
    Exibe recomenda√ß√µes baseadas na an√°lise de fraudes.
    
    Args:
        data: Dicion√°rio com DataFrames para an√°lise
    """
    st.markdown("<h2 style='text-align: center;'> Recomenda√ß√µes e Pr√≥ximos Passos</h2>", unsafe_allow_html=True)
    
    # Verificar se os dados foram carregados
    if not data:
        st.error("N√£o foi poss√≠vel carregar os dados para gerar recomenda√ß√µes.")
        return
    
    # Configura√ß√£o de layout
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Se√ß√£o 1: Resumo da situa√ß√£o atual
    st.markdown("<h3> Resumo da Situa√ß√£o Atual</h3>", unsafe_allow_html=True)
    
    # Calcular m√©tricas-chave para o resumo
    has_driver_data = ('drivers' in data and data['drivers'] is not None and not data['drivers'].empty) or \
                      ('suspicious_drivers' in data and data['suspicious_drivers'] is not None and not data['suspicious_drivers'].empty)
    
    has_product_data = 'missing_products' in data and data['missing_products'] is not None and not data['missing_products'].empty
    
    has_region_data = 'fraud_region' in data and data['fraud_region'] is not None and not data['fraud_region'].empty
    
    has_trend_data = 'fraud_trend' in data and data['fraud_trend'] is not None and not data['fraud_trend'].empty
    
    # Determinar o n√≠vel de risco global
    risk_level = "M√©dio"  # Padr√£o
    risk_color = "warning"
    
    if has_trend_data:
        df_trend = data['fraud_trend']
        avg_fraud_rate = df_trend['percentual_fraude'].mean() if 'percentual_fraude' in df_trend.columns else 5.0
        
        if avg_fraud_rate > 7.5:
            risk_level = "Alto"
            risk_color = "danger"
        elif avg_fraud_rate < 2.5:
            risk_level = "Baixo"
            risk_color = "success"
    
    # Exibir resumo
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown(
            create_kpi_card(
                "N√≠vel de Risco Global", 
                risk_level, 
                "Baseado na an√°lise de dados",
                color=risk_color
            ), 
            unsafe_allow_html=True
        )
    
    with col2:
        summary_text = "Com base na an√°lise dos dados dispon√≠veis, "
        
        if risk_level == "Alto":
            summary_text += (
                "identificamos um **n√≠vel de risco alto** para fraudes em entregas do Walmart. "
                "A taxa de fraude est√° significativamente acima dos n√≠veis aceit√°veis, exigindo a√ß√µes imediatas e abrangentes. "
                "As recomenda√ß√µes a seguir s√£o priorit√°rias e devem ser implementadas com urg√™ncia."
            )
        elif risk_level == "M√©dio":
            summary_text += (
                "identificamos um **n√≠vel de risco m√©dio** para fraudes em entregas do Walmart. "
                "Existem √°reas espec√≠ficas que requerem aten√ß√£o e melhorias, mas a situa√ß√£o geral n√£o √© cr√≠tica. "
                "As recomenda√ß√µes a seguir devem ser implementadas em fases, come√ßando pelas de maior impacto."
            )
        else:  # Baixo
            summary_text += (
                "identificamos um **n√≠vel de risco baixo** para fraudes em entregas do Walmart. "
                "O sistema atual parece estar funcionando adequadamente, com taxas de fraude dentro de n√≠veis aceit√°veis. "
                "As recomenda√ß√µes a seguir visam principalmente otimizar processos e prevenir futuros problemas."
            )
        
        st.markdown(summary_text)
    
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Se√ß√£o 2: Recomenda√ß√µes priorit√°rias
    st.markdown("<h3> Recomenda√ß√µes Priorit√°rias</h3>", unsafe_allow_html=True)
    
    # Criar recomenda√ß√µes baseadas nos dados dispon√≠veis
    recommendations = []
    
    # Recomenda√ß√µes para motoristas
    if has_driver_data:
        recommendations.append({
            "categoria": "Motoristas",
            "titulo": "Implementar Verifica√ß√£o de Entrega com Foto",
            "descricao": "Exigir que os motoristas tirem fotos de todas as entregas para comprova√ß√£o. Isso pode reduzir fraudes em at√© 30% segundo estudos do setor.",
            "impacto": 8,
            "esforco": 6,
            "prioridade": "Alta",
            "icon": "üöö"
        })
        
        recommendations.append({
            "categoria": "Motoristas",
            "titulo": "Programa de Auditoria para Motoristas de Alto Risco",
            "descricao": "Criar um programa espec√≠fico de verifica√ß√£o para motoristas com hist√≥rico de altas taxas de fraude, incluindo verifica√ß√µes aleat√≥rias e acompanhamento.",
            "impacto": 9,
            "esforco": 7,
            "prioridade": "Alta",
            "icon": "üîç"
        })
        
        recommendations.append({
            "categoria": "Motoristas",
            "titulo": "Sistema de Incentivo para Baixas Taxas de Fraude",
            "descricao": "Implementar um programa de recompensas para motoristas com baixas taxas de fraude, incentivando boas pr√°ticas e criando competi√ß√£o positiva.",
            "impacto": 7,
            "esforco": 5,
            "prioridade": "M√©dia",
            "icon": "üéØ"
        })
    
    # Recomenda√ß√µes para produtos
    if has_product_data:
        recommendations.append({
            "categoria": "Produtos",
            "titulo": "Embalagens Especiais para Produtos de Alto Risco",
            "descricao": "Desenvolver embalagens tamper-proof com identificadores √∫nicos para os produtos com maiores taxas de fraude.",
            "impacto": 8,
            "esforco": 8,
            "prioridade": "Alta",
            "icon": "üì¶"
        })
        
        recommendations.append({
            "categoria": "Produtos",
            "titulo": "Limites de Quantidade para Itens Frequentemente Fraudados",
            "descricao": "Estabelecer limites de quantidade por pedido para produtos com altas taxas de fraude, reduzindo o impacto potencial.",
            "impacto": 6,
            "esforco": 4,
            "prioridade": "M√©dia",
            "icon": "üî¢"
        })
    
    # Recomenda√ß√µes para regi√µes
    if has_region_data:
        recommendations.append({
            "categoria": "Regi√µes",
            "titulo": "Otimiza√ß√£o de Rotas em √Åreas de Alto Risco",
            "descricao": "Redesenhar rotas de entrega em regi√µes com altas taxas de fraude para melhorar a seguran√ßa e reduzir oportunidades de desvio.",
            "impacto": 7,
            "esforco": 9,
            "prioridade": "M√©dia",
            "icon": "üó∫Ô∏è"
        })
        
        recommendations.append({
            "categoria": "Regi√µes",
            "titulo": "Hubs de Verifica√ß√£o Regional",
            "descricao": "Estabelecer centros de verifica√ß√£o em regi√µes de alto risco, onde os produtos s√£o conferidos antes da entrega final.",
            "impacto": 9,
            "esforco": 10,
            "prioridade": "Baixa",
            "icon": "üè¢"
        })
    
    # Recomenda√ß√µes para clientes
    recommendations.append({
        "categoria": "Clientes",
        "titulo": "Sistema de Verifica√ß√£o para Reclama√ß√µes Frequentes",
        "descricao": "Implementar um processo de verifica√ß√£o adicional para clientes com hist√≥rico de m√∫ltiplas reclama√ß√µes de itens n√£o entregues.",
        "impacto": 8,
        "esforco": 7,
        "prioridade": "Alta",
        "icon": "üë•"
    })
    
    # Recomenda√ß√µes para processos
    recommendations.append({
        "categoria": "Processos",
        "titulo": "Integra√ß√£o de IA para Detec√ß√£o de Padr√µes de Fraude",
        "descricao": "Implementar um sistema de intelig√™ncia artificial para identificar padr√µes suspeitos em tempo real, antes que causem impacto significativo.",
        "impacto": 10,
        "esforco": 9,
        "prioridade": "Alta",
        "icon": "ü§ñ"
    })
    
    recommendations.append({
        "categoria": "Processos",
        "titulo": "Dashboard em Tempo Real para Monitoramento de Fraudes",
        "descricao": "Expandir este dashboard para operar em tempo real, permitindo interven√ß√µes imediatas quando padr√µes an√¥malos s√£o detectados.",
        "impacto": 8,
        "esforco": 7,
        "prioridade": "M√©dia",
        "icon": "üìä"
    })
    
    # Filtrar recomenda√ß√µes priorit√°rias (alta prioridade)
    priority_recommendations = [r for r in recommendations if r["prioridade"] == "Alta"]
    
    # Exibir recomenda√ß√µes priorit√°rias em cards
    if priority_recommendations:
        st.markdown("As recomenda√ß√µes a seguir foram identificadas como priorit√°rias com base na an√°lise dos dados:")
        
        # Organizar em grades de 2 colunas
        for i in range(0, len(priority_recommendations), 2):
            cols = st.columns(2)
            
            for j in range(2):
                if i + j < len(priority_recommendations):
                    rec = priority_recommendations[i + j]
                    
                    with cols[j]:
                        st.markdown(
                            f"""
                            <div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin-bottom: 20px; background-color: rgba(255, 255, 255, 0.8);">
                                <h4>{rec["icon"]} {rec["titulo"]}</h4>
                                <p><strong>Categoria:</strong> {rec["categoria"]}</p>
                                <p>{rec["descricao"]}</p>
                                <div style="display: flex; justify-content: space-between; margin-top: 10px;">
                                    <span style="color: #296D84;"><strong>Impacto: {rec["impacto"]}/10</strong></span>
                                    <span style="color: #CC5500;"><strong>Esfor√ßo: {rec["esforco"]}/10</strong></span>
                                </div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
    else:
        st.info("N√£o foram identificadas recomenda√ß√µes de alta prioridade.")
    
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Se√ß√£o 3: Matriz de esfor√ßo vs impacto
    st.markdown("<h3>Matriz de Esfor√ßo vs Impacto</h3>", unsafe_allow_html=True)
    
    # Criar dataframe para a matriz
    recommendations_df = pd.DataFrame(recommendations)
    
    # Criar scatter plot
    fig = px.scatter(
        recommendations_df,
        x="esforco",
        y="impacto",
        color="prioridade",
        size=[7] * len(recommendations),  # Tamanho fixo
        text="titulo",
        color_discrete_map={"Alta": "#FF6B6B", "M√©dia": "#FFD166", "Baixa": "#06D6A0"},
        hover_name="titulo",
        hover_data=["descricao", "categoria"],
        title="Matriz de Prioriza√ß√£o: Impacto vs Esfor√ßo de Implementa√ß√£o",
        labels={"esforco": "Esfor√ßo de Implementa√ß√£o (1-10)", "impacto": "Impacto Potencial (1-10)"}
    )
    
    # Personalizar layout
    fig.update_layout(
        xaxis=dict(range=[0, 11]),
        yaxis=dict(range=[0, 11]),
        plot_bgcolor='rgba(240, 240, 240, 0.5)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        annotations=[
            # Quadrantes
            dict(
                x=2.5,
                y=8.5,
                text="QUICK WINS",
                showarrow=False,
                font=dict(size=12, color="#097969")
            ),
            dict(
                x=8.5,
                y=8.5,
                text="PROJETOS ESTRAT√âGICOS",
                showarrow=False,
                font=dict(size=12, color="#8B0000")
            ),
            dict(
                x=2.5,
                y=2.5,
                text="BAIXA PRIORIDADE",
                showarrow=False,
                font=dict(size=12, color="#808080")
            ),
            dict(
                x=8.5,
                y=2.5,
                text="REAVALIAR",
                showarrow=False,
                font=dict(size=12, color="#CD853F")
            )
        ],
        shapes=[
            # Linhas divis√≥rias de quadrantes
            dict(
                type="line",
                x0=5.5, y0=0,
                x1=5.5, y1=11,
                line=dict(
                    color="gray",
                    width=1,
                    dash="dash",
                )
            ),
            dict(
                type="line",
                x0=0, y0=5.5,
                x1=11, y1=5.5,
                line=dict(
                    color="gray",
                    width=1,
                    dash="dash",
                )
            )
        ]
    )
    
    # Exibir matriz
    st.plotly_chart(fig, use_container_width=True)
    
    # Explica√ß√£o da matriz
    st.markdown(
        create_insight_box(
            "A matriz acima mapeia as recomenda√ß√µes de acordo com seu impacto potencial (eixo vertical) "
            "e o esfor√ßo necess√°rio para implementa√ß√£o (eixo horizontal). Os 'Quick Wins' (alto impacto, baixo esfor√ßo) "
            "devem ser priorizados para obter resultados r√°pidos, enquanto os projetos estrat√©gicos de longo prazo "
            "(alto impacto, alto esfor√ßo) devem ser planejados com anteced√™ncia.",
            icon_type="info"
        ),
        unsafe_allow_html=True
    )
    
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Se√ß√£o 4: Plano de a√ß√£o
    st.markdown("<h3> Plano de A√ß√£o Recomendado</h3>", unsafe_allow_html=True)
    
    # Criar estrutura do plano de a√ß√£o
    st.markdown("""
    O plano de a√ß√£o a seguir organiza as recomenda√ß√µes em fases de implementa√ß√£o:
    
    ### Fase 1: A√ß√µes Imediatas (1-3 meses)
    """)
    
    # Fase 1: A√ß√µes imediatas
    # Priorizar Quick Wins (alto impacto, baixo esfor√ßo)
    quick_wins = recommendations_df[(recommendations_df['impacto'] >= 6) & (recommendations_df['esforco'] <= 6)]
    
    if not quick_wins.empty:
        for _, rec in quick_wins.iterrows():
            st.markdown(f"""
            <div style="margin-left: 20px; margin-bottom: 10px;">
                <strong>{rec['icon']} {rec['titulo']}</strong> - {rec['descricao']}
            </div>
            """, unsafe_allow_html=True)
    else:
        st.info("N√£o foram identificadas a√ß√µes imediatas de baixo esfor√ßo e alto impacto.")
    
    # Fase 2: M√©dio prazo
    st.markdown("""
    ### Fase 2: M√©dio Prazo (4-6 meses)
    """)
    
    # Selecionar a√ß√µes de m√©dio prazo (prioridade m√©dia ou alta implementa√ß√£o moderada)
    medium_term = recommendations_df[
        ((recommendations_df['prioridade'] == "M√©dia") & (recommendations_df['esforco'] <= 8)) | 
        ((recommendations_df['prioridade'] == "Alta") & (recommendations_df['esforco'] > 6) & (recommendations_df['esforco'] <= 8))
    ]
    
    if not medium_term.empty:
        for _, rec in medium_term.iterrows():
            if rec['titulo'] not in quick_wins['titulo'].values:  # Evitar duplicados
                st.markdown(f"""
                <div style="margin-left: 20px; margin-bottom: 10px;">
                    <strong>{rec['icon']} {rec['titulo']}</strong> - {rec['descricao']}
                </div>
                """, unsafe_allow_html=True)
    else:
        st.info("N√£o foram identificadas a√ß√µes de m√©dio prazo.")
    
    # Fase 3: Longo prazo
    st.markdown("""
    ### Fase 3: Projetos Estrat√©gicos (6-12 meses)
    """)
    
    # Selecionar projetos estrat√©gicos (alto impacto, alto esfor√ßo)
    strategic = recommendations_df[(recommendations_df['impacto'] >= 8) & (recommendations_df['esforco'] >= 8)]
    
    if not strategic.empty:
        for _, rec in strategic.iterrows():
            st.markdown(f"""
            <div style="margin-left: 20px; margin-bottom: 10px;">
                <strong>{rec['icon']} {rec['titulo']}</strong> - {rec['descricao']}
            </div>
            """, unsafe_allow_html=True)
    else:
        st.info("N√£o foram identificados projetos estrat√©gicos de longo prazo.")
    
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Se√ß√£o 5: M√©tricas de acompanhamento
    st.markdown("<h3> M√©tricas para Acompanhamento</h3>", unsafe_allow_html=True)
    
    # Sugerir m√©tricas para acompanhar a efetividade das a√ß√µes
    st.markdown("""
    Para avaliar a efic√°cia das recomenda√ß√µes implementadas, sugerimos monitorar as seguintes m√©tricas-chave:
    
    #### M√©tricas Prim√°rias:
    - **Taxa geral de fraude (%)**: Acompanhar a tend√™ncia mensal comparando com o per√≠odo base
    - **Valor financeiro recuperado ($)**: Quantificar o impacto financeiro positivo das medidas
    - **Tempo de investiga√ß√£o de fraudes (dias)**: Medir a efici√™ncia do processo investigativo
    
    #### M√©tricas por Categoria:
    - **Motoristas**: Redu√ß√£o na taxa de fraude por motorista (%), Taxa de ades√£o ao novo protocolo (%)
    - **Produtos**: Redu√ß√£o de fraudes por categoria de produto (%), Efic√°cia das novas embalagens (%)
    - **Regi√µes**: Melhoria nas √°reas cr√≠ticas (%), Efici√™ncia das novas rotas (%)
    - **Clientes**: Redu√ß√£o em reclama√ß√µes repetidas (%), Satisfa√ß√£o com o processo de entrega (%)
    
    #### Painel de Controle:
    Recomendamos a cria√ß√£o de um painel de controle espec√≠fico para acompanhar a evolu√ß√£o dessas m√©tricas
    em tempo real, com alertas autom√°ticos para desvios significativos dos objetivos estabelecidos.
    """)
    
    # Adicionar meta de redu√ß√£o de fraude
    current_fraud_rate = 0.0
    
    if has_trend_data:
        df_trend = data['fraud_trend']
        if 'percentual_fraude' in df_trend.columns:
            current_fraud_rate = df_trend['percentual_fraude'].mean()
    
    # Se n√£o temos dados, usar valor placeholder
    if current_fraud_rate == 0.0:
        current_fraud_rate = 5.0
    
    # Definir meta com base na taxa atual
    target_reduction = 0.30  # Meta de redu√ß√£o de 30%
    target_rate = current_fraud_rate * (1 - target_reduction)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(
            create_kpi_card(
                "Meta de Redu√ß√£o de Fraude", 
                f"{target_reduction * 100:.0f}%", 
                f"Em 12 meses",
                color="success"
            ), 
            unsafe_allow_html=True
        )
    
    with col2:
        st.markdown(
            create_kpi_card(
                "Taxa de Fraude Alvo", 
                f"{target_rate:.2f}%", 
                f"Atual: {current_fraud_rate:.2f}%",
                color="success"
            ), 
            unsafe_allow_html=True
        )
    